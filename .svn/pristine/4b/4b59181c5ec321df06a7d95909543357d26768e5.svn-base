package com.heli.oa.sunshine.service.impl;

import com.heli.oa.sunshine.dao.SunshineDao;
import com.heli.oa.common.dao.UserDao;
import com.heli.oa.sunshine.entity.Sunshine;
import com.heli.oa.sunshine.entity.Task;
import com.heli.oa.common.entity.User;
import com.heli.oa.sunshine.service.SunshineService;
import com.heli.oa.sunshine.util.DingMessageUtils;
import com.heli.oa.sunshine.util.MailUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

/**
 * @Author:核利-白驹
 * @Descriction:
 * @Date:Created in 18:40 2018/11/6
 */
@Service
public class SunshineServiceImpl implements SunshineService {

    @Autowired
    private SunshineDao sunshineDao;
    @Autowired
    private UserDao userDao;
    @Autowired
    DingMessageUtils dingMessageUtils;
    private User user;
    private String plusStar = "<div class=\"layer-photos\">\n" +
            "<img  layer-src=\"/image/star1.png\" src=\"/image/star1.png\" alt=\"星星\">\n" +
            "</div>";
    private String minusStar = "<div class=\"layer-photos\">\n" +
            "<img  layer-src=\"/image/star2.png\" src=\"/image/star2.png\" alt=\"星星\">\n" +
            "</div>";
    @Override
    public List<Sunshine> listSunshine() { return sunshineDao.listSunshine(); }

    @Override
    public Sunshine getSunshine(Sunshine s) {
        return sunshineDao.getSunshine(s);
    }

    @Override
    public void addSunshine(Sunshine s) {
        user = userDao.getUserByNickname(s.getUserNickName());
        s.setUserId(user.getUserId());
        s.setSunshineStarHtml(plusStar);
        s.setSunshineMoney(Double.valueOf(0));
        s.setSunshineTime(new Date());
        s.setSunshineValue(1);
        sunshineDao.addSunshine(s);
        dingMessageUtils.addSunshine(s);
    }

    @Override
    public void minusSunshine(Sunshine s) throws Exception{
        user = userDao.getUserByNickname(s.getUserNickName());
        int role1 = user.getUserRole();
        Double money1;
        switch(role1){
            case 2:
            case 3:
                money1 = Double.valueOf(200);
                break;
            case  4:
            case  5:
                money1 = Double.valueOf(50);
                break;
            case  6:
                money1 = Double.valueOf(20);
                break;
            case  7:
                money1 = Double.valueOf(10);
                break;
            default:
                money1 = Double.valueOf(20);
        }
        s.setUserId(user.getUserId());
        s.setSunshineMoney(money1);
        s.setSunshineStarHtml(minusStar);
        s.setSunshineTime(new Date());
        s.setSunshineValue(-1);
        s.setSunshineMoneyStatus("尚未付款");
        s.setSunshineOverdueFine(Double.valueOf(0));
        s.setSunshineTotalMoney(money1);
        sunshineDao.minusSunshine(s);
        dingMessageUtils.minusSunshine(s);
        MailUtil mail = new MailUtil(userDao);
        mail.sendMinusSunshineMail(s);

    }

    @Override
    public void minusMoney(Sunshine s) { sunshineDao.minusMoney(s); }

    @Override
    public List<Double>  sumMoney() { return sunshineDao.sumMoney(); }

    @Override
    public List<Sunshine> listMiusSunshine() {
        return sunshineDao.listMiusSunshine();
    }

    @Override
    public List<Sunshine> listPlusSunshine() {
        return sunshineDao.listPlusSunshine();
    }

    @Override
    public List<Sunshine> listMoneySunshine() {
        return sunshineDao.listMoneySunshine();
    }

    @Override
    public void delPlusSunshine(Sunshine s) {
        sunshineDao.delPlusSunshine(s);
    }

    @Override
    public void delMinusSunshine(Sunshine s) {
        sunshineDao.delMinusSunshine(s);
    }

    @Override
    public void delMoneySunshine(Sunshine s) {
        sunshineDao.delMoneySunshine(s);
    }

    @Override
    public void updateMoneyStatus(Sunshine s) {
        sunshineDao.updateSunshine(s);
    }

    @Override
    public List<Sunshine> listByUserId(Sunshine s) {
        return sunshineDao.listByUserId(s.getUserId());
    }

    @Override
    public void updatePlusSunshine(Sunshine s) {
        sunshineDao.updatePlusSunshine(s);
    }

    @Override
    public void updateMinusSunshine(Sunshine s) {
        sunshineDao.updateMinusSunshine(s);
    }

    @Override
    public void updateMoneySunshine(Sunshine s) {
        sunshineDao.updateMoneySunshine(s);
    }

    @Override
    public void minusSunshineN(Sunshine s , Task t) {
        user = userDao.getUserByNickname(s.getUserNickName());
        int role1 = user.getUserRole();
        Double money1;
        switch(role1){
            case 2:
            case 3:
                money1 = Double.valueOf(200);
                break;
            case  4:
            case  5:
                money1 = Double.valueOf(50);
                break;
            case  6:
                money1 = Double.valueOf(20);
                break;
            case  7:
                money1 = Double.valueOf(10);
                break;
            default:
                money1 = Double.valueOf(0);
        }

        int N = t.getTaskPunishment();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < N; i++) {
            sb.append(minusStar);
        }
        s.setUserId(user.getUserId());
        s.setSunshineMoney(money1 * N);
        s.setSunshineStarHtml(sb.toString());
        s.setSunshineTime(new Date());
        s.setSunshineValue(-1);
        s.setSunshineMoneyStatus("尚未付款");
        s.setSunshineOverdueFine(Double.valueOf(0));
        s.setSunshineTotalMoney(money1 * N);
        sunshineDao.minusSunshine(s);
        dingMessageUtils.minusSunshineN(s,t);
    }
}
