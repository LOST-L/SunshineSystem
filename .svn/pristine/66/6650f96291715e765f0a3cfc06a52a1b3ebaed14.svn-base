package com.heli.oa.sunshine.controller;

import com.alibaba.fastjson.JSONObject;
import com.heli.oa.common.util.CodeUtils;
import com.heli.oa.sunshine.entity.Backlog;
import com.heli.oa.sunshine.service.BacklogService;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

import static com.heli.oa.common.util.ErrorCatchUtil.errorMessageToDing;

/**
 *@Author: 白驹
 *@Date: 2019/1/10 14:08
 *@Description:
 */
/**todo 变量接收待优化*/
@Slf4j
@Data
public class BacklogController{

    @Autowired
    private BacklogService backService;

    /**
     *@Author: 白驹 on 2019/1/10 14:10
     *@param:
     *@return:
     *@Description:
     */
    @ResponseBody
    @RequestMapping(value = "/addBacklog",produces = "application/json;charset=utf-8")
    public String addBacklog(Backlog backlog){
        CodeUtils codeUtils = new CodeUtils();
        try{
            backService.addBacklog(backlog);
            codeUtils.setCode(200);
        }catch (Exception e){
            errorMessageToDing(e);
        }
        return JSONObject.toJSONString(codeUtils);
    }

    /**
     *@Author: 白驹 on 2019/1/10 14:10
     *@param:
     *@return:
     *@Description:
     */
    @ResponseBody
    @RequestMapping(value = "/deleteBacklog",produces = "application/json;charset=utf-8")
    public String deleteBacklog(Backlog backlog){
        CodeUtils codeUtils = new CodeUtils();
        try{
            backService.deleteBacklog(backlog);
            codeUtils.setCode(200);
        }catch (Exception e){
            errorMessageToDing(e);
        }
        return JSONObject.toJSONString(codeUtils);
    }

    /**
     *@Author: 白驹 on 2019/1/10 14:09
     *@param:
     *@return:
     *@Description:
     */
    @ResponseBody
    @RequestMapping(value = "/insertBacklog",produces = "application/json;charset=utf-8")
    public String insertBacklog(Backlog backlog){
        CodeUtils codeUtils = new CodeUtils();
        try{
            backService.insertBacklog(backlog);
            codeUtils.setCode(200);
        }catch (Exception e){
            errorMessageToDing(e);
        }
        return JSONObject.toJSONString(codeUtils);
    }

    /**
     *@Author: 白驹 on 2019/1/10 14:09
     *@param:
     *@return:
     *@Description:
     */
    @ResponseBody
    @RequestMapping(value = "/listByPriorityBacklog",produces = "application/json;charset=utf-8")
    public String listByPriorityBacklog(Backlog backlog){
        CodeUtils codeUtils = new CodeUtils();
        try{
            List<Backlog> list = backService.listByPriority(backlog);
            codeUtils.setCode(200);
            codeUtils.setParamList(list);
        }catch (Exception e){
            errorMessageToDing(e);
        }
        return JSONObject.toJSONString(codeUtils);
    }

    /**
     *@Author: 白驹 on 2019/1/10 14:09
     *@param:
     *@return:
     *@Description:
     */
    @ResponseBody
    @RequestMapping(value = "/listByStatusBacklog",produces = "application/json;charset=utf-8")
    public String listByStatusBacklog(Backlog backlog){
        CodeUtils codeUtils = new CodeUtils();
        try{
            List<Backlog> list = backService.listByStatus(backlog);
            codeUtils.setCode(200);
            codeUtils.setParamList(list);
        }catch (Exception e){
            errorMessageToDing(e);
        }
        return JSONObject.toJSONString(codeUtils);
    }

    /**
     *@Author: 白驹 on 2019/1/10 14:09
     *@param:
     *@return:
     *@Description:
     */
    @ResponseBody
    @RequestMapping(value = "/listSetTimeBacklog",produces = "application/json;charset=utf-8")
    public String listSetTimeBacklog(Backlog backlog){
        CodeUtils codeUtils = new CodeUtils();
        try{
            List<Backlog> list = backService.listSetTime(backlog);
            codeUtils.setCode(200);
            codeUtils.setParamList(list);
        }catch (Exception e){
            errorMessageToDing(e);
        }
        return JSONObject.toJSONString(codeUtils);
    }

    /**
     *@Author: 白驹 on 2019/1/10 14:09
     *@param:
     *@return:
     *@Description:
     */
    @ResponseBody
    @RequestMapping(value = "/searchDoneBacklog",produces = "application/json;charset=utf-8")
    public String searchDoneBacklog(Backlog backlog){
        CodeUtils codeUtils = new CodeUtils();
        try{
            List<Backlog> list = backService.searchDone(backlog);
            codeUtils.setCode(200);
            codeUtils.setParamList(list);
        }catch (Exception e){
            errorMessageToDing(e);
        }
        return JSONObject.toJSONString(codeUtils);
    }

    /**
     *@Author: 白驹 on 2019/1/10 14:08
     *@param:
     *@return:
     *@Description:
     */
    @ResponseBody
    @RequestMapping(value = "/setTimeBacklog",produces = "application/json;charset=utf-8")
    public String setTimeBacklog(Backlog backlog){
        CodeUtils codeUtils = new CodeUtils();
        try{
            String result = backService.setTime(backlog);
            if("定时成功".equals(result)){
                codeUtils.setCode(200);
            }else if("时间冲突".equals(result)){
                codeUtils.setCode(500);
            }
        }catch (Exception e){
            errorMessageToDing(e);
        }
        return JSONObject.toJSONString(codeUtils);
    }

    /**
     *@Author: 白驹 on 2019/1/10 14:08
     *@param:
     *@return:
     *@Description:
     */
    @ResponseBody
    @RequestMapping(value = "/cancelTimeBacklog",produces = "application/json;charset=utf-8")
    public String cancelTimeBacklog(Backlog backlog){
        CodeUtils codeUtils = new CodeUtils();
        try{
            backService.cancelTime(backlog);
            codeUtils.setCode(200);
        }catch (Exception e){
            errorMessageToDing(e);
        }
        return JSONObject.toJSONString(codeUtils);
    }

    /**
     *@Author: 白驹 on 2019/1/10 14:08
     *@param:
     *@return:
     *@Description:
     */
    @ResponseBody
    @RequestMapping(value = "/overBacklog",produces = "application/json;charset=utf-8")
    public String overBacklog(Backlog backlog){
        CodeUtils codeUtils = new CodeUtils();
        try{
            backService.overTime(backlog);
            codeUtils.setCode(200);
        }catch (Exception e){
            errorMessageToDing(e);
        }
        return JSONObject.toJSONString(codeUtils);
    }

}
